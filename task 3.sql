-- 1. Listing Events and Their Average Ticket Prices:
SELECT event_id, event_name, AVG(ticket_price) AS average_ticket_price
FROM Event
GROUP BY event_id, event_name;

-- 2. Calculating the Total Revenue Generated by Events:
SELECT SUM(total_cost) AS total_revenue
FROM Booking;

-- 3. Finding the Event with the Highest Ticket Sales:
SELECT event_id, SUM(num_tickets) AS total_tickets_sold
FROM Booking
GROUP BY event_id
ORDER BY total_tickets_sold DESC
LIMIT 1;

-- 4. Calculating the Total Number of Tickets Sold for Each Event:
SELECT event_id, SUM(num_tickets) AS total_tickets_sold
FROM Booking
GROUP BY event_id;

-- 5. Finding Events with No Ticket Sales:
SELECT event_id, event_name
FROM Event
GROUP BY event_id, event_name
HAVING COUNT(booking_id) = 0;

-- 6. Finding the User Who Has Booked the Most Tickets:
SELECT customer_id, COUNT(*) AS total_tickets_booked
FROM Booking
GROUP BY customer_id
ORDER BY total_tickets_booked DESC
LIMIT 1;

-- 7. Listing Events and the Total Number of Tickets Sold for Each Month:
SELECT YEAR(booking_date) AS year, MONTH(booking_date) AS month, event_id, SUM(num_tickets) AS total_tickets_sold
FROM Booking
GROUP BY year, month, event_id;

-- 8. Calculating the Average Ticket Price for Events in Each Venue:
SELECT venue_id, AVG(ticket_price) AS average_ticket_price
FROM Event
GROUP BY venue_id;

-- 9. Calculating the Total Number of Tickets Sold for Each Event Type:
SELECT e.event_type, SUM(b.num_tickets) AS total_tickets_sold
FROM Event e
JOIN Booking b ON e.event_id = b.event_id
GROUP BY e.event_type;

-- 10. Calculating the Total Revenue Generated by Events in Each Year:
SELECT YEAR(booking_date) AS year, SUM(total_cost) AS total_revenue
FROM Booking
GROUP BY year;

-- 11. Listing Users Who Have Booked Tickets for Multiple Events:
SELECT customer_id, COUNT(DISTINCT event_id) AS events_booked
FROM Booking
GROUP BY customer_id
HAVING events_booked > 1;

-- 12. Calculating the Total Revenue Generated by Events for Each User:
SELECT customer_id, SUM(total_cost) AS total_revenue
FROM Booking
GROUP BY customer_id;

-- 13. Calculating the Average Ticket Price for Events in Each Category and Venue:
SELECT venue_id, event_type, AVG(ticket_price) AS average_ticket_price
FROM Event
GROUP BY venue_id, event_type;

-- 14. Listing Users and the Total Number of Tickets They've Purchased in the Last 30 Days:
SELECT customer_id, SUM(num_tickets) AS total_tickets_purchased
FROM Booking
WHERE booking_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY)
GROUP BY customer_id;
