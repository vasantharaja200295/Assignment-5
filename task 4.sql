-- 1. Calculate the Average Ticket Price for Events in Each Venue Using a Subquery
SELECT venue_id, AVG(ticket_price) AS average_ticket_price
FROM Event
GROUP BY venue_id;

-- 2. Find Events with More Than 50% of Tickets Sold using subquery
SELECT event_id, event_name
FROM Event
WHERE (
    SELECT SUM(num_tickets)
    FROM Booking
    WHERE Booking.event_id = Event.event_id
) > 0.5 * total_seats;

-- 3. Calculate the Total Number of Tickets Sold for Each Event
SELECT event_id, SUM(num_tickets) AS total_tickets_sold
FROM Booking
GROUP BY event_id;

-- 4. Find Users Who Have Not Booked Any Tickets Using a NOT EXISTS Subquery
SELECT customer_id, customer_name
FROM Customer
WHERE NOT EXISTS (
    SELECT *
    FROM Booking
    WHERE Booking.customer_id = Customer.customer_id
);

-- 5. List Events with No Ticket Sales Using a NOT IN Subquery
SELECT event_id, event_name
FROM Event
WHERE event_id NOT IN (
    SELECT DISTINCT event_id
    FROM Booking
);

-- 6. Calculate the Total Number of Tickets Sold for Each Event Type Using a Subquery in the FROM Clause
SELECT E.event_type, COALESCE(SUM(B.num_tickets), 0) AS total_tickets_sold
FROM (SELECT DISTINCT event_type FROM Event) AS E
LEFT JOIN (
    SELECT event_id, num_tickets
    FROM Booking
) AS B ON E.event_type = (
    SELECT event_type
    FROM Event
    WHERE Event.event_id = B.event_id
)
GROUP BY E.event_type;

-- 7. Find Events with Ticket Prices Higher Than the Average Ticket Price Using a Subquery in the WHERE Clause
SELECT event_id, event_name, ticket_price
FROM Event
WHERE ticket_price > (
    SELECT AVG(ticket_price)
    FROM Event
);

-- 8. Calculate the Total Revenue Generated by Events for Each User Using a Correlated Subquery
SELECT customer_id, customer_name, 
    (SELECT SUM(total_cost) FROM Booking WHERE Booking.customer_id = Customer.customer_id) AS total_revenue
FROM Customer;

-- 9. List Users Who Have Booked Tickets for Events in a Given Venue Using a Subquery in the WHERE Clause
SELECT customer_id, customer_name
FROM Customer
WHERE EXISTS (
    SELECT *
    FROM Booking
    WHERE Booking.customer_id = Customer.customer_id
    AND Booking.event_id IN (
        SELECT event_id
        FROM Event
        WHERE venue_id = 2
    )
);

-- 10. Calculate the Total Number of Tickets Sold for Each Event Category Using a Subquery with GROUP BY
SELECT E.event_type, SUM(B.num_tickets) AS total_tickets_sold
FROM Event AS E
LEFT JOIN Booking AS B ON E.event_id = B.event_id
GROUP BY E.event_type;

-- 11. Find Users Who Have Booked Tickets for Events in each Month Using a Subquery with DATE_FORMAT
SELECT customer_id, customer_name
FROM Customer
WHERE EXISTS (
    SELECT *
    FROM Booking
    WHERE Booking.customer_id = Customer.customer_id
    AND DATE_FORMAT(Booking.booking_date, '%Y-%m') = '{given_month}'
);

-- 12. Calculate the Average Ticket Price for Events in Each Venue Using a Subquery
SELECT venue_id, AVG(ticket_price) AS average_ticket_price
FROM Event
GROUP BY venue_id;
